/**
 * ðŸ“¦ Repo
 *
 * Manages access to remote or local repository endpoints for resolving
 * package definitions (e.g., scenes, engines, UI bundles).
 *
 * This class is designed to provide flexible package discovery and fetching
 * across prioritized endpoint lists. It abstracts away the process of
 * determining the full URL to fetch a package definition from its ID.
 *
 * Typical usage involves:
 * - Setting up a prioritized list of repo base URLs
 * - Resolving symbolic IDs like "scene:chess" to real JSON paths
 * - Downloading package definitions for use in BootStrap
 *
 * This class does not manage asset downloading or execution â€” only package resolution.
 */
export class Repo {

    /**
     * @param {Net} net - Required Net instance for performing fetches.
     * @param {Object} [opts={}] - Optional configuration object.
     * @param {Array<string>} [opts.repos=[]] - Default list of base repo endpoints.
     */
    constructor(bootstrap, opts = {}) {
        if (!bootstrap) {
            throw new Error("Repo requires a valid bootstrapinstance.");
        }
	this.bootstrap = bootstrap;
        this.net = bootstrap.net;
        this.opts = opts;
        this.repos = Array.isArray(opts.repos) ? opts.repos : [''];
    }
    
    /**
     * Resolves a package definition from an ID, path, or inline object.
     *
     * This is a lightweight utility that returns the resolved package definition
     * without loading any assets, dependencies, or executing lifecycle hooks.
     *
     * Supported inputs:
     * - A direct package object â†’ returned as-is (with optional handler transformation)
     * - A path ending in `.json` â†’ fetched using the provided or fallback repo list
     * - A symbolic ID (e.g., "scene:chess") â†’ resolved against known endpoints
     *
     * @param {string|object} def - The package ID, URL, or direct definition object.
     * @param {object} [options={}] - Optional resolution configuration.
     * @param {Array<string>|null} [options.repo=null] - Custom repo list to search first. Null = fallback.
     * @param {Array<string>} [options.repo_order=["runtime", "default"]] - Search priority strategy.
     * @param {string|false} [options.lid=false] - Override local ID for registration. False = infer automatically.
     * @param {function|null} [options.handler=null] - Optional synchronous function to transform the resolved package.
     * @returns {Promise<object>} The resolved (and possibly transformed) package definition.
     */
    async load(def, {
	repo = null,
	repo_order = ["runtime", "default"],
	lid = false,
	handler = null
    } = {}) {
	// 1. Direct object â€” no resolution needed
	if (typeof def === 'object' && def !== null) {
	    return this._resolve(def, lid,null, handler);
	}

	// 2. Ensure def is a string (symbolic ID or URL)
	if (typeof def !== 'string') {
	    throw new Error("Invalid package definition: must be object or string");
	}

	// 3. Determine if it's a direct .json path (e.g. /pkg/xyz.json)
	const isPath = def.endsWith('.json');

	// 4. Build repo search list
	const repoList = this._buildRepoList(repo, repo_order);
	// 5. Try each repo to resolve the package
	for (const base of repoList) {

	    const url = this._buildPath(base, def, isPath);
	    try {
		const pkg = await this.net.http.get(url, { format: 'body' });
		if (!pkg || typeof pkg !== 'object') continue;
		return this._resolve(pkg, lid, url, handler);
	    } catch (err) {
		// fail quietly and continue trying other repos
	    }
	}

	throw new Error(`Package "${def}" not found in any repo.`);
    }

    /**
     * Internal helper to build a prioritized list of unique repository URLs.
     *
     * @param {Array<string>|null} runtime - The repo(s) provided at runtime.
     * @param {Array<string>} order - Priority labels (e.g., ["runtime", "default"]).
     * @returns {Array<string>} Ordered, de-duplicated list of repo endpoints.
     */
    _buildRepoList(runtime, order) {
	const repoLists = {
            runtime: runtime ? [].concat(runtime) : [],
            default: this.repos || [''],
	    local : [''],
	};

	const seen = new Set();
	const result = [];

	for (const label of order) {
            const list = repoLists[label];
            if (Array.isArray(list)) {
		for (const url of list) {
                    if (!seen.has(url)) {
			seen.add(url);
			result.push(url);
                    }
		}
            }
	}

	return result;
    }

    /**
     * Internal helper to finalize and optionally transform a resolved package definition.
     *
     * @param {object} def - The raw package definition object.
     * @param {string|false} lid - Local ID override; if falsey, original is kept.
     * @param {string|null} url - Optional URL where the package was fetched from.
     * @param {function|null} handler - Optional transform function to apply to the resolved package.
     * @returns {object} The finalized package object.
     */
    _resolve(def, lid = false, url = null, handler = null) {
	const resolved = {
            ...def,
            ...(lid ? { lid } : {})
	};

	if (url) {
            const base = url.replace(/[^/]+$/, '');
            resolved.__meta = { source: url, base };
	}

	return handler ? handler(resolved) : resolved;
    }
    
    /**
     * Constructs a full URL to a package definition.
     *
     * @param {string} repoBase - The base URL or path of the repo.
     * @param {string} def - Package ID (e.g. "scene:chess") or file path (e.g. "./chess.json").
     * @param {boolean|null} [isPath=null] - Force interpretation as path or ID; null = auto-detect.
     * @returns {string} The resolved full URL.
     */

    _buildPath(repoBase, def, isPath = null) {
    // Auto-detect if needed
    const pathMode = isPath !== null ? isPath : def.endsWith(".json") || def.startsWith(".");

    // Normalize base
    const cleanBase = repoBase.replace(/\/+$/, "");

    // Normalize def (handle both path and symbolic cases)
    const cleanDef = pathMode
        ? def.replace(/^\/+/, "")                                   // path: remove leading slashes
        : def.replace(/^\/+/, "").replace(":", "/") + ".json";      // symbolic: clean + convert

    return `${cleanBase}/${cleanDef}`;
    }
    
    
}

export default Repo;
